openapi: 3.0.3
info:
  title: Mini CRM Platform API
  description: A comprehensive Mini CRM Platform with customer segmentation, campaign delivery, and AI insights
  version: 1.0.0
  contact:
    name: Mini CRM Team
    email: support@minicrm.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3001/api
    description: Development server
  - url: https://api.minicrm.com/api
    description: Production server

security:
  - BearerAuth: []
  - GoogleOAuth: []

paths:
  # Authentication Endpoints
  /auth/google:
    post:
      tags:
        - Authentication
      summary: Google OAuth Login
      description: Authenticate user with Google OAuth token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  description: Google OAuth ID token
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      token:
                        type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh JWT Token
      description: Refresh expired JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  description: Current JWT token
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      token:
                        type: string
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout User
      description: Logout current user and invalidate token
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string

  /auth/profile:
    get:
      tags:
        - Authentication
      summary: Get User Profile
      description: Get current user profile information
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Data Ingestion Endpoints
  /ingest/customers:
    post:
      tags:
        - Data Ingestion
      summary: Create Customer (Sync)
      description: Create a new customer synchronously
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomerRequest'
      responses:
        '201':
          description: Customer created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      customer:
                        $ref: '#/components/schemas/Customer'
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'

  /ingest/customers/async:
    post:
      tags:
        - Data Ingestion
      summary: Create Customer (Async)
      description: Create a new customer asynchronously via message queue
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomerRequest'
      responses:
        '202':
          description: Customer creation queued successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string

  /ingest/customers/batch:
    post:
      tags:
        - Data Ingestion
      summary: Create Multiple Customers (Sync)
      description: Create multiple customers synchronously
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - customers
              properties:
                customers:
                  type: array
                  items:
                    $ref: '#/components/schemas/CreateCustomerRequest'
                  maxItems: 1000
      responses:
        '201':
          description: Batch processing completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      total:
                        type: integer
                      successful:
                        type: integer
                      failed:
                        type: integer
                      results:
                        type: array
                        items:
                          type: object
                      errors:
                        type: array
                        items:
                          type: object
                  message:
                    type: string

  # Segment Management Endpoints
  /segments:
    get:
      tags:
        - Segments
      summary: List Segments
      description: Get list of customer segments
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Segments retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      segments:
                        type: array
                        items:
                          $ref: '#/components/schemas/Segment'
                      total:
                        type: integer
                      page:
                        type: integer
                      limit:
                        type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - Segments
      summary: Create Segment
      description: Create a new customer segment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSegmentRequest'
      responses:
        '201':
          description: Segment created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      segment:
                        $ref: '#/components/schemas/Segment'
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /segments/{id}:
    get:
      tags:
        - Segments
      summary: Get Segment by ID
      description: Get segment details by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Segment retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      segment:
                        $ref: '#/components/schemas/Segment'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

    put:
      tags:
        - Segments
      summary: Update Segment
      description: Update segment details
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSegmentRequest'
      responses:
        '200':
          description: Segment updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      segment:
                        $ref: '#/components/schemas/Segment'
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

    delete:
      tags:
        - Segments
      summary: Delete Segment
      description: Delete segment by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Segment deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /segments/preview:
    post:
      tags:
        - Segments
      summary: Preview Segment
      description: Preview segment audience without saving
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - rules
              properties:
                rules:
                  $ref: '#/components/schemas/SegmentRules'
      responses:
        '200':
          description: Segment preview generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      preview:
                        $ref: '#/components/schemas/SegmentPreview'

  # Campaign Management Endpoints
  /campaigns:
    get:
      tags:
        - Campaigns
      summary: List Campaigns
      description: Get list of campaigns
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, scheduled, running, completed, paused, cancelled]
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Campaigns retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      campaigns:
                        type: array
                        items:
                          $ref: '#/components/schemas/Campaign'
                      total:
                        type: integer
                      page:
                        type: integer
                      limit:
                        type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - Campaigns
      summary: Create Campaign
      description: Create a new campaign
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCampaignRequest'
      responses:
        '201':
          description: Campaign created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      campaign:
                        $ref: '#/components/schemas/Campaign'
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # AI Integration Endpoints
  /ai/parse-rules:
    post:
      tags:
        - AI Integration
      summary: Parse Natural Language to Rules
      description: Convert natural language description to segment rules
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - prompt
              properties:
                prompt:
                  type: string
                  description: Natural language description of segment rules
                  example: "People who haven't shopped in 6 months and spent over ₹5K"
      responses:
        '200':
          description: Rules parsed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      rules:
                        $ref: '#/components/schemas/SegmentRules'
                      confidence:
                        type: number
                        minimum: 0
                        maximum: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /ai/message-suggestions:
    post:
      tags:
        - AI Integration
      summary: Generate Message Suggestions
      description: Generate personalized message suggestions for campaigns
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - campaignObjective
              properties:
                campaignObjective:
                  type: string
                  description: Campaign objective or goal
                  example: "Bring back inactive users"
                audienceDescription:
                  type: string
                  description: Description of target audience
                tone:
                  type: string
                  enum: [formal, casual, friendly, urgent, promotional]
                  description: Message tone
      responses:
        '200':
          description: Message suggestions generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      suggestions:
                        type: array
                        items:
                          type: string
                      confidence:
                        type: number
                        minimum: 0
                        maximum: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Health Check
  /health:
    get:
      tags:
        - System
      summary: Health Check
      description: Check API health status
      security: []
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      status:
                        type: string
                        example: "healthy"
                      timestamp:
                        type: string
                        format: date-time
                      version:
                        type: string
                        example: "1.0.0"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    GoogleOAuth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://oauth2.googleapis.com/token
          scopes:
            openid: OpenID Connect
            email: Email address
            profile: Basic profile information

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        avatar:
          type: string
          format: uri
      required:
        - id
        - email

    Customer:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        phone:
          type: string
        address:
          type: string
        city:
          type: string
        state:
          type: string
        country:
          type: string
        postalCode:
          type: string
        totalSpent:
          type: number
          format: decimal
        totalOrders:
          type: integer
        lastOrderAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - email

    CreateCustomerRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
        name:
          type: string
        phone:
          type: string
        address:
          type: string
        city:
          type: string
        state:
          type: string
        country:
          type: string
        postalCode:
          type: string

    Segment:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        rules:
          $ref: '#/components/schemas/SegmentRules'
        userId:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateSegmentRequest:
      type: object
      required:
        - name
        - rules
      properties:
        name:
          type: string
        description:
          type: string
        rules:
          $ref: '#/components/schemas/SegmentRules'

    UpdateSegmentRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        rules:
          $ref: '#/components/schemas/SegmentRules'

    SegmentRules:
      oneOf:
        - $ref: '#/components/schemas/RuleCondition'
        - $ref: '#/components/schemas/RuleGroup'

    RuleCondition:
      type: object
      required:
        - field
        - operator
        - value
      properties:
        field:
          type: string
          enum: [email, name, phone, city, state, country, postalCode, totalSpent, totalOrders, lastOrderAt, createdAt]
        operator:
          type: string
          enum: [eq, ne, gt, gte, lt, lte, contains, startsWith, endsWith, in, notIn, isNull, isNotNull]
        value:
          oneOf:
            - type: string
            - type: number
            - type: boolean
            - type: array

    RuleGroup:
      type: object
      required:
        - operator
        - conditions
      properties:
        operator:
          type: string
          enum: [AND, OR]
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/SegmentRules'

    SegmentPreview:
      type: object
      properties:
        totalCustomers:
          type: integer
        sampleCustomers:
          type: array
          items:
            $ref: '#/components/schemas/Customer'
        estimatedSize:
          type: integer

    Campaign:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        message:
          type: string
        segmentId:
          type: string
        userId:
          type: string
        status:
          type: string
          enum: [draft, scheduled, running, completed, paused, cancelled]
        scheduledAt:
          type: string
          format: date-time
        startedAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateCampaignRequest:
      type: object
      required:
        - name
        - message
        - segmentId
      properties:
        name:
          type: string
        description:
          type: string
        message:
          type: string
        segmentId:
          type: string
        scheduledAt:
          type: string
          format: date-time

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            message:
              type: string
            code:
              type: string
            details:
              type: object

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
